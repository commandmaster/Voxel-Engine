#version 460
#extension GL_EXT_ray_tracing : require

layout(binding = 1, rgba32f) uniform image2D storageImage;
layout(binding = 0) uniform accelerationStructureEXT topLevelAS;

layout(binding = 2) uniform Uniforms 
{
    mat4 viewInverse;
    mat4 projInverse;
    vec3 position;
} uniforms;

struct RayPayload 
{
    vec3 color;
    float distance;
    vec3 normal;
    uint seed;
    vec4 debugColor;
};

layout(location = 0) rayPayloadEXT RayPayload payload;

uint initRand(uint seed) 
{
    seed = (seed ^ 61) ^ (seed >> 16);
    seed *= 9;
    seed = seed ^ (seed >> 4);
    seed *= 0x27d4eb2d;
    seed = seed ^ (seed >> 15);
    return seed;
}

float rand(inout uint seed) 
{
    seed = initRand(seed);
    return float(seed) / float(0xffffffffu);
}

vec4 blendColors(vec4 src, vec4 dst) 
{
    return vec4(mix(dst.rgb, src.rgb, src.a), dst.a + src.a * (1.0 - dst.a));
}


void main() {
    vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
    vec2 inUV = pixelCenter / vec2(gl_LaunchSizeEXT.xy);
    
    vec2 d = inUV * 2.0 - 1.0;

    vec4 origin = uniforms.viewInverse * vec4(0, 0, 0, 1);        
    vec4 target = uniforms.projInverse * vec4(d.x, d.y, 1, 1);

    target = uniforms.viewInverse * vec4(target.xyz / target.w, 1);

    vec3 direction = normalize(target.xyz - origin.xyz);

    payload.color = vec3(0.0);
    payload.distance = 0.0;
    payload.normal = vec3(0.0);
    payload.seed = initRand(
        uint(gl_LaunchIDEXT.x) + 
        uint(gl_LaunchIDEXT.y) * gl_LaunchSizeEXT.x + 
        uint(gl_LaunchIDEXT.z) * gl_LaunchSizeEXT.x * gl_LaunchSizeEXT.y);
    payload.debugColor = vec4(0.0);

    float tMin = 0.001;
    float tMax = 1000.0;

    traceRayEXT(
        topLevelAS,         // accelerationStructure
        gl_RayFlagsOpaqueEXT, // rayFlags
        0xFF,               // cullMask
        0,                  // sbtRecordOffset
        0,                  // sbtRecordStride
        0,                  // missIndex
        origin.xyz,          // origin
        tMin,              // Tmin
        direction,       // direction
        tMax,              // Tmax
        0                  // payload
    );


    vec4 finalColor = mix(vec4(payload.color, 1.0), payload.debugColor, payload.debugColor.a);

    // If we hit nothing, miss shader will have written the payload
    imageStore(storageImage, ivec2(gl_LaunchIDEXT.xy), finalColor);
}