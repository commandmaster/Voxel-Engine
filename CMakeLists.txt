cmake_minimum_required (VERSION 3.8)

# Enable Hot Reload for MSVC compilers if supported.
if (POLICY CMP0141)
  cmake_policy(SET CMP0141 NEW)
  set(CMAKE_MSVC_DEBUG_INFORMATION_FORMAT "$<IF:$<AND:$<C_COMPILER_ID:MSVC>,$<CXX_COMPILER_ID:MSVC>>,$<$<CONFIG:Debug,RelWithDebInfo>:EditAndContinue>,$<$<CONFIG:Debug,RelWithDebInfo>:ProgramDatabase>>")
endif()

project ("VoxelEngine")

include(FetchContent)

FetchContent_Declare(
    glfw
    GIT_REPOSITORY https://github.com/glfw/glfw.git
    GIT_TAG master
)

FetchContent_Declare(
    imgui
    GIT_REPOSITORY https://github.com/ocornut/imgui.git
    GIT_TAG master
)

FetchContent_Declare(
    glm
    GIT_REPOSITORY https://github.com/g-truc/glm.git
    GIT_TAG master
)

FetchContent_Declare(
    jsoncpp
    GIT_REPOSITORY https://github.com/open-source-parsers/jsoncpp.git
    GIT_TAG master
)

FetchContent_MakeAvailable(glfw glm imgui jsoncpp)

add_library(imgui STATIC
    ${imgui_SOURCE_DIR}/imgui.cpp
    ${imgui_SOURCE_DIR}/imgui_draw.cpp
    ${imgui_SOURCE_DIR}/imgui_demo.cpp
    ${imgui_SOURCE_DIR}/imgui_tables.cpp
    ${imgui_SOURCE_DIR}/imgui_widgets.cpp

    # Add ImGui backends
    ${imgui_SOURCE_DIR}/backends/imgui_impl_glfw.cpp
    ${imgui_SOURCE_DIR}/backends/imgui_impl_vulkan.cpp
 "source/VoxelEngine.hpp" "source/main.cpp" "source/rasterizer.cpp"  "source/Camera.h" "source/Device.h")

target_include_directories(imgui PUBLIC
    ${imgui_SOURCE_DIR}
    ${imgui_SOURCE_DIR}/backends
)

set_property(TARGET imgui PROPERTY CXX_STANDARD 20)

include_directories(${CMAKE_SOURCE_DIR}/include)

link_directories(${CMAKE_SOURCE_DIR}/lib)

find_package(Vulkan REQUIRED)

include_directories(${Vulkan_INCLUDE_DIRS})
include_directories(${glm_SOURCE_DIR})                          

target_link_libraries(imgui PRIVATE glfw)

add_executable (VoxelEngine "source/VoxelEngine.cpp" "source/VoxelEngine.hpp" "source/main.cpp" "source/rasterizer.cpp"  "source/Camera.h" "source/Device.h")
set_property(TARGET VoxelEngine PROPERTY CXX_STANDARD 20)

if (CMAKE_BUILD_TYPE STREQUAL "Debug")
    target_link_libraries(VoxelEngine PRIVATE shaderc_combinedd.lib)  # Debug version
else()
    target_link_libraries(VoxelEngine PRIVATE shaderc_combined.lib)    # Release version
endif()

target_link_libraries(VoxelEngine PRIVATE 
    glfw glm imgui jsoncpp_static Vulkan::Vulkan 
)




